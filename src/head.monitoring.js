/*!
 * Head.Monitoring()  HeadJS extension to track client-side application traces
 *                    Uses Visual Studio .NET auto-completion
 * Author             Robert Hoffmann (itechnology)
 * License            MIT / http://bit.ly/mit-license
 *
 * Version 1.0
 */
;(function(window, document, navigator, api, undefined) {
"use strict";

    // ENUM
    var logLevel = {
        OFF    : 0,
        CONSOLE: 1,
        INFO   : 2,
        WARNING: 4,
        ERROR  : 8
    };

    var record = {};
    
    // Current level
    var debugLevel = logLevel.OFF | logLevel.VERBOSE | logLevel.INFO | logLevel.WARNING | logLevel.ERROR;


    var log = function() {
        if (debugLevel & logLevel.VERBOSE) {
            _log(arguments);
            console.log(arguments);
        }
    };
    var info = function() {
        if (debugLevel & logLevel.INFO) {
            _log(arguments);
            console.info(arguments);
        }
    };
    var warn = function() {
        if (debugLevel & logLevel.WARNING) {
            _log(arguments);
            console.warn(arguments);
        }
    };
    var error = function() {
        if (debugLevel & logLevel.ERROR) {
            _log(arguments);
            console.error(arguments);
        }
    };    
    
    function _log(event, category, action, value) {
        if (debugLevel & logLevel.OFF) {
            return;
        }

        var message = {};

        //time, timeEnd, log, info, warn, error, 

        if (api.record) {
            window.ga({
                'send': {
                    "event": event, "category": category, "action": action, "value": value
                }
            });
        }
    }

    function onError(msg, url, line) {
        /// <summary>Tracks errors from browser sent events</summary>
        /// <param name="msg" type="Object">Generated by the browser</param>
        /// <param name="url" type="Object">RequestUrl</param>
        /// <param name="line" type="Object">Line number in document</param>
        error({
            debugLevel  : logLevel.CONSOLE,
            referer     : document.location,
            "requestUrl": url,
            method      : "window.onError",
            Exception   : { message: msg, line: line },
        });
    }
    
    if (window.jQuery) {
        // Hooks into jQuery's ajax error pipeline, if jQuery is loaded
        window
            .jQuery(document)
            .ajaxError(function (event, xhr, settings, exception) { 
                error({
                    debugLevel  : logLevel.CONSOLE,
                    referer     : document.location,
                    description : xhr.responseText,
                    method      : "jQuery.ajaxError",
                    "requestUrl": settings.url,
                    Exception   : exception,
                    StatusCode  : xhr.status
                });
            })
            .ajaxComplete( function(event, XMLHttpRequest, ajaxOptions) {
                // INFO: WinInet Error Codes: http://support.microsoft.com/kb/193625
                if (xhr.status > 12000 || xhr.status === 0 || /error|timeout|abort|parsererror/.test(status))
                {
                    // XMLHttpRequest, ajaxOptions
                    error({
                            debugLevel  : logLevel.CONSOLE,
                            referer     : document.location,
                            description : xhr.responseText,
                            method      : "jQuery.ajaxError",
                            "requestUrl": settings.url,
                            Exception   : exception,
                            StatusCode  : xhr.status
                        });
                }                           
            });
    }

    // Manually attach, as to not overwrite existing handler
    if (window.addEventListener) {
        window.addEventListener("error", onError, false);

    } else {
        window.attachEvent("onerror", onError);
    }


    window[api] = {
        log: log
    };

})(window, document, navigator, api);